import {app, BrowserWindow, globalShortcut, ipcMain, Menu, shell} from "electron";
import AddressStore, { SavedAddress } from "./addressStore";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
    app.quit();
}

let mainWindow: BrowserWindow | null = null;
let addressStore: AddressStore;
let isShowingAddressManager = false;

const createWindow = (): void => {
    // Create the browser window.
    mainWindow = new BrowserWindow({
        height: 800,
        width: 1200,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
            nodeIntegration: false,
            contextIsolation: true,
        },
    });

    // 初始化地址存储
    addressStore = new AddressStore();

    // 检查是否有最近使用的地址
    const lastUsedAddress = addressStore.getLastUsedAddress();
    const addresses = addressStore.getAddresses();

    if (lastUsedAddress && addresses.some(addr => addr.url === lastUsedAddress)) {
        // 如果有最近使用的地址，直接加载该地址
        mainWindow.loadURL(lastUsedAddress);
    } else {
        // 否则显示地址输入页面
        showAddressInput();
    }

    mainWindow.webContents.on('before-input-event', (event, input) => {
        if (input.type === 'keyDown' && input.key === 'w' && input.meta) {
            event.preventDefault();
            // Command+W 被按下，隐藏主窗口
            mainWindow.hide();
        }
    });

    // 创建菜单
    createMenu();
};

const showAddressInput = () => {
    if (mainWindow) {
        isShowingAddressManager = true;
        mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    }
};

const showAddressManager = () => {
    if (mainWindow) {
        isShowingAddressManager = true;
        mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
        // 通过webContents发送消息切换到管理页面
        mainWindow.webContents.once('dom-ready', () => {
            mainWindow.webContents.executeJavaScript(`
                window.dispatchEvent(new CustomEvent('show-address-manager'));
            `);
        });
    }
};

const createMenu = () => {
    const template: Electron.MenuItemConstructorOptions[] = [
        {
            label: 'Memo',
            submenu: [
                {
                    label: '切换地址',
                    accelerator: 'CmdOrCtrl+T',
                    click: showAddressInput
                },
                {
                    label: '地址管理',
                    accelerator: 'CmdOrCtrl+M',
                    click: showAddressManager
                },
                { type: 'separator' },
                {
                    label: '退出',
                    accelerator: process.platform === 'darwin' ? 'Cmd+Q' : 'Ctrl+Q',
                    click: () => app.quit()
                }
            ]
        },
        {
            label: '编辑',
            submenu: [
                { label: '撤销', accelerator: 'CmdOrCtrl+Z', role: 'undo' },
                { label: '重做', accelerator: 'Shift+CmdOrCtrl+Z', role: 'redo' },
                { type: 'separator' },
                { label: '剪切', accelerator: 'CmdOrCtrl+X', role: 'cut' },
                { label: '复制', accelerator: 'CmdOrCtrl+C', role: 'copy' },
                { label: '粘贴', accelerator: 'CmdOrCtrl+V', role: 'paste' }
            ]
        },
        {
            label: '视图',
            submenu: [
                { label: '重新加载', accelerator: 'CmdOrCtrl+R', role: 'reload' },
                { label: '强制重新加载', accelerator: 'CmdOrCtrl+Shift+R', role: 'forceReload' },
                { label: '切换开发者工具', accelerator: 'F12', role: 'toggleDevTools' },
                { type: 'separator' },
                { label: '实际大小', accelerator: 'CmdOrCtrl+0', role: 'resetZoom' },
                { label: '放大', accelerator: 'CmdOrCtrl+Plus', role: 'zoomIn' },
                { label: '缩小', accelerator: 'CmdOrCtrl+-', role: 'zoomOut' },
                { type: 'separator' },
                { label: '切换全屏', accelerator: 'F11', role: 'togglefullscreen' }
            ]
        }
    ];

    const menu = Menu.buildFromTemplate(template);
    Menu.setApplicationMenu(menu);
};

// IPC 处理器
const setupIPCHandlers = () => {
    // 地址管理相关
    ipcMain.handle('get-addresses', () => {
        return addressStore.getAddresses();
    });

    ipcMain.handle('save-addresses', (_, addresses: SavedAddress[]) => {
        addressStore.saveAddresses(addresses);
    });

    ipcMain.handle('get-last-used-address', () => {
        return addressStore.getLastUsedAddress();
    });

    ipcMain.handle('set-last-used-address', (_, address: string) => {
        addressStore.setLastUsedAddress(address);
    });

    // 导航相关
    ipcMain.handle('navigate-to-address', (_, address: string) => {
        if (mainWindow) {
            isShowingAddressManager = false;
            mainWindow.loadURL(address);
            // 更新地址存储
            addressStore.addOrUpdateAddress(address);
        }
    });

    // UI 控制相关
    ipcMain.handle('show-address-input', () => {
        showAddressInput();
    });

    ipcMain.handle('show-address-manager', () => {
        showAddressManager();
    });
};

app.on("ready", () => {
    createWindow();
    setupIPCHandlers();
});

app.on("window-all-closed", () => {
    if (process.platform !== "darwin") {
        app.quit();
    }
});

app.on("activate", () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    } else {
        mainWindow.show();
    }
});


// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
